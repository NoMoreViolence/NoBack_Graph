#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('myapp:server');
const server = require('http').createServer(app);

// 포트 번호 함수
const normalizePort = (val) => {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
};
// 포트 번호
const port = normalizePort(process.env.PORT || '3000');
// 포트 설정
app.set('port', port);


// Error 의 이벤트 리스너
const OH_ERROR = (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ?
    `Pipe ${port}` :
    `Port ${port}`;

  // 친숙한 메시지로 특정 청취 오류를 처리합니다.
  switch (error.code) {
    case 'EACCES':
      console.error(bind);
      console.log('requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind);
      console.log('already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
};
// listening 의 이벤트 리스너
const listening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string' ?
    `pipe ${addr}` :
    `port ${addr.port}`;
  debug(`Listening on ${bind}`);
};

// 소켓 io server 가동
const io = require('socket.io')(server, () => {
  console.log('소켓 연결 성공');
});

io.on('connection', (socket) => {
  console.log('User Connected');

  socket.on('Example', () => {
    console.log('Hello');
  });
});

// 서버 가동
server.listen(port, () => {
  console.log('http://localhost:3000');
});
server.on('error', OH_ERROR);
server.on('listening', listening);
