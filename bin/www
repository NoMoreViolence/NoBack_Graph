#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('myapp:server');
const server = require('http').createServer(app);

// 포트 번호 함수
const normalizePort = (val) => {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
};
// 포트 번호
const port = normalizePort(process.env.PORT || '3000');
// 포트 설정
app.set('port', port);


// Error 의 이벤트 리스너
const OH_ERROR = (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ?
    `Pipe ${port}` :
    `Port ${port}`;

  // 친숙한 메시지로 특정 청취 오류를 처리합니다.
  switch (error.code) {
    case 'EACCES':
      console.error(bind);
      console.log('requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind);
      console.log('already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
};
// listening 의 이벤트 리스너
const listening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string' ?
    `pipe ${addr}` :
    `port ${addr.port}`;
  debug(`Listening on ${bind}`);
};

// 소켓 io server 가동
const io = require('socket.io')(server);

const names = [];
io.on('connection', (socket) => {
  console.log('Connected');
  let check = false; // 중복 이름 체크 방지 변수
  let username; // 이름
  console.log('새로운 사용자 접근');

  // 이름 중복체크
  socket.on('NameCheck', (data) => {
    username = data.name;
    if (username === '' && check === false) { // 이름 null 체크, 중복 이름 체크 방지
      io.to(socket.id).emit('NameCheck', { data: true, name: username }); // true 보냄
      return;
    }
    for (let index = 0; index < names.length; index += 1) { // 중복체크 for 문
      if (names[index] === username) { // 배열의 이름 데이터와 비교
        io.to(socket.id).emit('NameCheck', { data: false, name: null }); // 중복일 때에는 false를 보냄
        return;
      }
    }

    names.push(username); // 중복이 아닐 때에는 데이터를 배열에 넣음
    console.log(`User added: ${names}`);
    check = true; // 이름 등록 완료
    console.log(`Name Check Success ${username}`);
    io.to(socket.id).emit('NameCheck', { data: true, name: username }); // true 보냄
  });

  // 메시지 수신
  socket.on('SendMessage', (data) => {
    if (check === false) {
      console.log('잘못된 접근');
      console.log(`이름 없는 사용자: 채팅 접근 ${socket.id}`);
      io.to(socket.id).emit('Err');
      return;
    }
    console.log(`${socket.id}s check: ${check}`);
    console.log(`${username}: ${data.message}`);
    io.emit('ResMessage', { msg: data.message, name: username });
  });

  // 연결 종료
  socket.on('disconnect', () => {
    console.log(`User Disconnected: ${username}`);
    for (let index = 0; index < names.length; index += 1) { // 중복체크 for 문
      if (names[index] === username) { // 배열의 이름 데이터와 비교
        names.splice(index, 1);
        return;
      }
    }
  });
});

// 서버 가동
server.listen(port, () => {
  console.log('http://localhost:3000');
});
server.on('error', OH_ERROR);
server.on('listening', listening);
