#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('myapp:server');
const server = require('http').createServer(app);

// 포트 번호 함수
const normalizePort = (val) => {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
};
// 포트 번호
const port = normalizePort(process.env.PORT || '3000');
// 포트 설정
app.set('port', port);

// Error 의 이벤트 리스너
const OH_ERROR = (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // 친숙한 메시지로 특정 청취 오류를 처리합니다.
  switch (error.code) {
    case 'EACCES':
      console.error(bind);
      console.log('requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind);
      console.log('already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
};
// listening 의 이벤트 리스너
const listening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
};

// 게임
const digit = () => {
  // 자릿수 함수
  let zero = Math.floor(Math.random() * 100); // 100분의 1 확률로 그래프는 0이 된다
  zero = Number(zero);
  if (zero === 0) {
    return zero; // 그래프 0
  }

  let hundred = Math.floor(Math.random() * 100); // 100분의 1 확률로 100의자리
  hundred = Number(hundred);
  if (hundred === 0) {
    hundred = 100;
    return hundred; // 그래프 100의자리
  }

  let ten = Math.floor(Math.random() * 5); // 5분의 1 확률로 10의자리
  ten = Number(ten);
  if (ten === 0) {
    ten = 10;
    return ten; // 그래프 10의자리
  }

  return 1; // 그래프 1의자리
};
const ONE = () => {
  // 일의자리 함수
  let temp = Math.floor(Math.random() * 10);

  if (temp === 0 || temp === 1 || temp === 2) {
    return 0;
  }
  temp = Math.floor(Math.random() * 10);
  return temp;
};
const TEN = () => {
  // 십의자리 함수
  let temp = Math.floor(Math.random() * 9) + 1;

  if (temp === 1 || temp === 2 || temp === 3 || temp === 4) {
    return 10;
  }
  temp = Math.floor(Math.random() * 9) + 1;
  return temp * 10;
};
const UNDER = () => {
  // 소수점
  let temp = Math.random() * 1;
  temp = temp.toFixed(2);
  temp *= 1;
  if (temp === 0) {
    temp = UNDER();
  }
  return temp;
};
const graph = (num) => {
  // 그래프 함수
  if (num === 0) {
    return 0; // 0
  } else if (num === 1) {
    return ONE() + UNDER(); // 1의자리
  } else if (num === 10) {
    return TEN() + ONE() + UNDER(); // 10의자리
  }
  return 100; // 100
};
let value = 0; // 그래프 값
let game = 0; // 게임 시작, 끝, 대기 판단
// 게임

// 소켓 io server 가동
const io = require('socket.io')(server);
// 소켓 io server 가동

// 도박 게임 반복
const dobak = () => {
  if (game === 0) {
    value = graph(digit());
    value = value.toFixed(2);
    value *= 1;
    console.log(`게임 시작: ${value}`);
    io.emit('Game', { data: value });
    game = 1;
    setTimeout(() => {
      dobak();
    }, 5000);
  } else if (game === 1) {
    console.log('베팅 시간');
    io.emit('Delay', { data: 'Betting Time' });
    game = 0;
    setTimeout(() => {
      dobak();
    }, 10000);
  }
};
// 도박

// 소켓
const names = [];
io.on('connection', (socket) => {
  console.log('New Gamer Connected');
  let check = false; // 중복 이름 체크 방지 변수
  let username = null; // 이름
  let money = 0; // 돈
  let bettingmoney = 0; // 베팅한 돈
  let cashout = 0; // 캐쉬
  let betted = false; // 베팅여부


  socket.on('NameCheck', (data) => { // 이름 체크
    // 게임 회원 등록
    if (data.name === '' || check === true) {
      // 이름 null 체크, 부여된 이름 변경 방지
      io.to(socket.id).emit('NameCheck', { data: false, name: null }); // true 보냄
      return;
    }
    for (let index = 0; index < names.length; index += 1) {
      // 중복체크 for 문
      if (names[index] === data.name) {
        // 배열의 이름 데이터와 비교
        io.to(socket.id).emit('NameCheck', { data: false, name: null }); // false를 보냄
        return;
      }
    }

    username = data.name; // 이름
    names.push(username); // 올바른 이름 등록: 이름 배열에 넣음
    check = true; // 이름 부여 완료
    money = 10000; // 처음 돈 만원
    console.log(`Name Check Success ${username}`);
    io.to(socket.id).emit('NameCheck', { data: true, name: username, cash: money }); // true 보냄
  });


  socket.on('SendMessage', (data) => { // 메시지
    if (check === false) { // 인가된 사용자가 아님
      console.log('Wrong Connection');
      console.log(`None Name User: Chatting access denied ${socket.id}`);
      io.to(socket.id).emit('Err');
      return;
    }
    console.log(`${username}: ${data.message}`);
    io.emit('ResMessage', { msg: data.message, name: username });
  });


  socket.on('Betting', (data) => { // 베팅
    if (check !== false) { // 인가된 사용자
      if (betted === false) { // 정상적인 베팅
        if (check !== false && game === 0) { // 인가된 사용자 체크 + 베팅 시간 중 베팅
          bettingmoney = data.money;
          bettingmoney *= 1;
          cashout = data.out;
          cashout *= 1;
          if ( // 베팅한 금액과 캐쉬 아웃 금액 숫자 체크 - 1000원 이상 및 이상한 글자, 원래 돈보다 많은 돈 입력 방지
            bettingmoney >= 1000 &&
            money >= bettingmoney &&
            typeof bettingmoney === 'number' &&
            Number.isNaN(bettingmoney) === false &&
            typeof cashout === 'number' &&
            Number.isNaN(cashout) === false
          ) {
            money -= bettingmoney;
            betted = true;
            io.to(socket.id).emit('Betting', { return: true, dollar: money }); // 베팅성공
            io.emit('BET', { name: username });
            return;
          }
          io.to(socket.id).emit('Betting', { return: false, dollar: money }); // 베팅실패
          return;
        }
        io.to(socket.id).emit('Betting', { return: false, dollar: money }); // 베팅실패
      }
    }
  });


  socket.on('Game', () => { // 게임시작
    if (check !== false) { // 인가된 사용자
      if (betted === true) { // 베팅한 사용자일 때
        if (value < cashout) { // 베팅실패
          io.to(socket.id).emit('Report', { // 베팅 실패
            dollar: money,
            spent: bettingmoney,
            bet: 'Fail',
            end: value,
            mybetting: cashout,
          });
          io.emit('Board-Report', { // 실시간 기록 보내기
            name: username,
            betmoney: bettingmoney,
            grade: 'Fail',
            mybetting: cashout,
            spent: `-${bettingmoney}`,
          });
          bettingmoney = 0;
          cashout = 0;
          betted = false;
        } else { // 베팅성공
          money += bettingmoney * cashout;
          money += bettingmoney;
          money = money.toFixed();
          money *= 1;
          io.to(socket.id).emit('Report', { // 베팅 성공
            dollar: money,
            spent: bettingmoney,
            bet: 'Success',
            end: value,
            mybetting: cashout,
          });
          io.emit('Board-Report', { // 실시간 기록 보내기
            name: username,
            betmoney: bettingmoney,
            grade: 'Success',
            mybetting: cashout,
            spent: `+${(bettingmoney * cashout) + bettingmoney}`,
          });
          bettingmoney = 0;
          cashout = 0;
          betted = false;
        }
        return;
      }
      bettingmoney = 0; // 값 지우기
      cashout = 0; // 값 지우기
      io.to(socket.id).emit('Report', { // 베팅 안한 사용자
        dollar: money,
        spent: 0,
        bet: 'Not Betted',
        end: value,
        mybetting: 0,
      });
    }
  });


  // 연결 종료
  socket.on('disconnect', () => {
    console.log(`User Disconnected: ${username}`);
    for (let index = 0; index < names.length; index += 1) {
      // 중복체크 for 문
      if (names[index] === username) {
        // 배열의 이름 데이터와 비교
        names.splice(index, 1);
        return;
      }
    }
  });
});
dobak(); // 게임 가동
// 서버 가동
server.listen(port, () => {
  console.log('http://localhost:3000');
});
server.on('error', OH_ERROR);
server.on('listening', listening);
